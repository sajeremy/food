/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/openapi.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Openapi Schema */
        get: operations["get_openapi_schema_openapi_json_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Status */
        get: operations["get_status_api_v0_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/grocery_receipt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Parse Grocery Receipt Image
         * @description Parse a grocery receipt image and return the structured data.
         *
         *     Args:
         *         user (str): The username of the user parsing the receipt.
         *         img_file (UploadFile): The uploaded image file of the grocery receipt.
         *
         *     Returns:
         *         GroceryReceiptSchema: The parsed receipt data.
         */
        post: operations["parse_grocery_receipt_image_api_v0_grocery_receipt_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Body_parse_grocery_receipt_image_api_v0_grocery_receipt_post */
        Body_parse_grocery_receipt_image_api_v0_grocery_receipt_post: {
            /** User */
            user: string;
            /**
             * Img File
             * Format: binary
             */
            img_file: string;
        };
        /**
         * GroceryCategory
         * @enum {string}
         */
        GroceryCategory: "produce" | "dairy" | "meat" | "dessert" | "beverage" | "snacks" | "frozen" | "canned" | "grains" | "condiments" | "household" | "personal_care" | "other";
        /** GroceryReceiptSchema */
        GroceryReceiptSchema: {
            /**
             * Date Time
             * @description Date and time of the purchase as datetime object
             */
            date_time?: string | null;
            /**
             * Is Valid
             * @description Indicates if a valid grocery receipt
             */
            is_valid: boolean;
            /** @description User who made the purchase */
            user: components["schemas"]["UserBase"];
            /**
             * @description Store where the purchase was made
             * @default {
             *       "name": "unknown"
             *     }
             */
            store: components["schemas"]["StoreBase"];
            /**
             * Purchases
             * @description List of purchased items
             */
            purchases: components["schemas"]["Purchase"][];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * Purchase
         * @description Represents a purchase transaction for a specific item.
         */
        Purchase: {
            /**
             * Name
             * @description Name of the item
             */
            name: string;
            /**
             * @description Category of the item, e.g., produce, dairy, etc.
             * @default other
             */
            category: components["schemas"]["GroceryCategory"];
            /**
             * Brand
             * @description Brand of the item and may be None if not clear
             */
            brand?: string | null;
            /**
             * Quantity
             * @description Quantity of the purchased item
             */
            quantity: number;
            /**
             * Unit Price
             * @description Unit price of the purchased item
             */
            unit_price: number;
            /** @description Unit type of the purchased item, e.g., lb, ea */
            unit_type: components["schemas"]["UnitType"];
        };
        /** StoreBase */
        StoreBase: {
            /**
             * Name
             * @description Name of the store or 'unknown' if information not parsable
             * @default unknown
             */
            name: string;
            /**
             * Address
             * @description Address of the store
             */
            address?: string | null;
            /**
             * Phone
             * @description Phone number of the store
             */
            phone?: string | null;
        };
        /**
         * UnitType
         * @enum {string}
         */
        UnitType: "oz" | "lb" | "ea";
        /** UserBase */
        UserBase: {
            /**
             * Username
             * @description Username of the user, used for identification in the system
             */
            username: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_openapi_schema_openapi_json_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_status_api_v0_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    parse_grocery_receipt_image_api_v0_grocery_receipt_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_parse_grocery_receipt_image_api_v0_grocery_receipt_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroceryReceiptSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
